<?php

/**
 * A class for affecting body classes.
 *
 * @package WordPress
 * @subpackage CSS_Tricks_Theme_Mod_Demo
 * @since CSS_Tricks_Theme_Mod_Demo 1.0
 */

function csst_tmd_body_classes_init() {
	new CSST_TMD_Body_Classes();
}
add_action( 'init' , 'csst_tmd_body_classes_init', 1 );

class CSST_TMD_Body_Classes {

	public function __construct() {

		// Add some body classes based on the customizer settings and values.
		add_filter( 'body_class', array( $this, 'body_class' ), 999 );

		// Add some body classes based on the customizer and their values.
		add_filter( 'admin_body_class', array( $this, 'admin_body_class' ), 999 );

		// Add some body classes to the post editor.
		add_filter( 'tiny_mce_before_init', array( $this, 'editor_class' ) );

	}

	/**
	 * Get the CSS classes generated by our theme mods.
	 * 
	 * @param  string $output_as Output as an array or string.
	 * @return mixed  The classes generated by our theme mods, either as a string or an array.
	 */
	function get_classes( $output_as = 'array' ) {

		// Will hold the classes.
		$classes = array();
		
		// Fire up our theme mods class.
		$theme_mods_class = new CSST_TMD_Theme_Mods;

		// Grab all the settings.
		$settings = $theme_mods_class -> get_settings();

		// For each setting...
		foreach( $settings as $setting_id => $setting ) {

			// Grab the value of that setting.
			$value = $setting['value'];

			// Make that setting into a CSS class.
			$class = sanitize_html_class( CSST_TMD . "-$setting_id-$value" );
		
			$classes[] = $class;

		}

		// There shouldn't be any duplicates, but just in case.
		$classes = array_unique( $classes );

		// Let's alphabetize them, just to be a jerk.
		sort( $classes );

		// Do we want the classes as a string?
		if( $output_as == 'string' ) {
			$classes = implode( ' ', $classes );
		}

		return $classes;

	}

	/**
	 * A function for adding body classes to the post editor.
	 * 
	 * @param  array $init_array The array of settings that describe TinyMCE.
	 * @return array The array of settings that describe TinyMCE, with out body classes added.
	 */
	public function editor_class( $init_array ) {

		// Grab all the classes, as a string.
		$customizer_classes = $this -> get_classes( 'string' );

		// Grab the classes currently in TinyMCE.
		$body_class = $init_array['body_class'];

		// Append our classes to the old classes and send it back.
		$body_class .= " $customizer_classes ";
		$init_array['body_class']= $body_class;

		return $init_array;

	}	

	/**
	 * Add our body classes to the front end.
	 * 
	 * @param  array $classes The current array of body classes.
	 * @return array The body classes, with out custom ones merged in.
	 */
	public function body_class( $classes ) {
		 
		// Get the settings as an array of classes.
		$customizer_classes = $this -> get_classes();

		// Merge our customizer classes with the existing classes.
		$classes = array_merge( $classes, $customizer_classes );

		// Alphabetize the classes.
		sort( $classes );

		return $classes;

	}

	/**
	 * Add our body classes to wp-admin.
	 * 
	 * @param  string $classes The current string of body classes.
	 * @return string The body classes, with out custom ones appended.
	 */
	public function admin_body_class( $classes ) {
		 
		// Grab the settings as a string of classes, each seperated by a space.
		$customizer_classes = $this -> get_classes( 'string' );

		// Append our customizer classes to the current classes.
		$classes = "$classes $customizer_classes";

		return $classes;

	}

}